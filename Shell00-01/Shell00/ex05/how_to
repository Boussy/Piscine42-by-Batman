Cet exercice consiste Ã  crÃ©er un script shell, git_commit.sh, qui affiche les identifiants des 5 derniers commits d'un dÃ©pÃ´t Git.
Cela vous permettra de manipuler les commandes Git en ligne de commande et de comprendre comment extraire des informations Ã  partir d'un dÃ©pÃ´t.

Le script devra afficher les identifiants des commits sous la forme de 5 hachages de commits (SHA-1), chacun suivi d'un caractÃ¨re $, ce qui est demandÃ© dans l'exemple de sortie.


Ã‰tape 1 : CrÃ©er le script

Dans votre rÃ©pertoire ex05/, commencez par crÃ©er le fichier git_commit.sh :
- mkdir ex05
- cd ex05
- touch git_commit.sh

Une fois le fichier crÃ©Ã©, vous devrez vous assurer qu'il est exÃ©cutable.
Vous pouvez le faire en donnant les permissions adÃ©quates : chmod +x git_commit.sh

Vous pouvez maintenant ouvrir le fichier dans un Ã©diteur de texte pour y insÃ©rer votre script : vi git_commit.sh

  

Ã‰tape 2 : RÃ©cupÃ©rer les 5 derniers commits

Le cÅ“ur de la tÃ¢che consiste Ã  rÃ©cupÃ©rer les identifiants des 5 derniers commits dans votre dÃ©pÃ´t Git.
Pour cela, Git met Ã  votre disposition une commande trÃ¨s pratique : git log.

Afficher les 5 derniers commits :
La commande suivante permet de rÃ©cupÃ©rer les 5 derniers commits sous forme de hachages : git log -n 5 --pretty=format:"%H"
-n 5 : Limite la sortie aux 5 derniers commits.
--pretty=format:"%H" : Affiche uniquement l'identifiant du commit (SHA-1), sans autres informations comme le message ou l'auteur.

Ajouter un $ Ã  la fin de chaque identifiant :
Une fois que vous avez extrait les identifiants des commits, vous devez les afficher avec un caractÃ¨re $ Ã  la fin de chaque commit, comme spÃ©cifiÃ© dans l'exercice.
Pour cela, vous pouvez utiliser sed pour ajouter le $ Ã  la fin de chaque ligne.
Voici comment vous pouvez combiner les commandes : git log -n 5 --pretty=format:"%H" | sed 's/$/$/'

Mettre tout dans le script :
Dans votre fichier git_commit.sh, vous allez maintenant insÃ©rer cette commande. Voici le contenu final du script :
#!/bin/bash
git log -n 5 --pretty=format:"%H" | sed 's/$/$/'

#!/bin/bash : Ceci est le shebang, il indique que le script doit Ãªtre exÃ©cutÃ© avec l'interprÃ©teur Bash.
git log -n 5 --pretty=format:"%H" : Cette commande rÃ©cupÃ¨re les 5 derniers commits.
sed 's/$/$/' : Cette commande sed ajoute un $ Ã  la fin de chaque ligne, comme demandÃ©.



Ã‰tape 3 : Tester le script

Une fois votre script sauvegardÃ© et fermÃ©, vous pouvez l'exÃ©cuter avec la commande suivante : ./git_commit.sh
La sortie devrait ressembler Ã  ceci (avec des hachages rÃ©els de vos commits) :
baa23b54f0adb7bf42623d6d0a6ed4587e11412a$
2f52d74b1387fa80eea844969e8dc5483b531ac1$
905f53d98656771334f53f59bb984fc29774701f$
5ddc8474f4f15b3fcb72d08fcb333e19c3a27078$
e94d0b448c03ec633f16d84d63beaef9ae7e7be8$

VÃ©rification avec cat -e :
Pour vÃ©rifier le bon format, vous pouvez exÃ©cuter la commande cat -e pour afficher les fins de ligne ($) : bash git_commit.sh | cat -e
La sortie devrait Ãªtre exactement celle demandÃ©e dans l'exercice, avec un $ aprÃ¨s chaque identifiant de commit.



Ã‰tape 4 : Soumettre le script

Une fois que tout est en ordre, vous pouvez soumettre votre script dans votre rÃ©pertoire Git.
Assurez-vous d'ajouter le fichier Ã  Git, de le committer, puis de pousser les changements vers le serveur.

Ajouter le fichier Ã  Git : git add git_commit.sh
Valider le fichier : git commit -m "CrÃ©ation du script pour afficher les 5 derniers commits"
Pousser le fichier : git push






RÃ©sumÃ© des Ã©tapes :

CrÃ©ez un fichier git_commit.sh.
Utilisez la commande git log pour rÃ©cupÃ©rer les 5 derniers commits.
Ajoutez un $ Ã  la fin de chaque commit avec sed.
Testez le script en exÃ©cutant ./git_commit.sh et vÃ©rifiez la sortie avec cat -e.
Soumettez le fichier en l'ajoutant Ã  Git et en le poussant vers le serveur.




Commandes rÃ©capitulatives :

mkdir ex05
cd ex05
touch git_commit.sh
chmod +x git_commit.sh
nano git_commit.sh
-> InsÃ©rer le contenu du script :
# #!/bin/bash
# git log -n 5 --pretty=format:"%H" | sed 's/$/$/'
./git_commit.sh
git add git_commit.sh
git commit -m "CrÃ©ation du script pour afficher les 5 derniers commits"
git push




Petit conseil :
N'hÃ©sitez pas Ã  tester votre script dans un dÃ©pÃ´t Git oÃ¹ vous avez dÃ©jÃ  plusieurs commits pour vous assurer que la sortie est correcte.
C'est une bonne pratique de tester tout avant de soumettre ! ğŸ˜Š
